package cmd

import (
	b64 "encoding/base64"
	//"encoding/json"
	"fmt"
	"strings"
	//"io/ioutil"
	//"os"

	"github.com/spf13/cobra"
)

func init() {
	redisSearchCmd.Flags().StringVarP(&UploadInfile, "infile", "I", "", "Infile generated by ht redis dump -j")
	redisSearchCmd.Flags().StringVarP(&SearchString, "string", "s", "", "Key value to search for in the redis dump")
	redisSearchCmd.Flags().BoolVarP(&Decode, "decode", "D", false, "Decode the base64 before writing to terminal (default no)")
	redisSearchCmd.Flags().BoolVarP(&Fuzzy, "fuzzy", "F", false, "Fuzzy (contains) search for strings")
	redisSearchCmd.MarkFlagRequired("infile")
	redisSearchCmd.MarkFlagRequired("string")

	// NOTE: if you see a command duplicated
	// in the help system, check the `AddCommand`
	// calls in all of your cmds...
	redisRootCmd.AddCommand(redisSearchCmd)
}

var UploadInfile string
var SearchString string
var Decode bool = false
var Fuzzy = false

var redisSearchCmd = &cobra.Command{
	Use:   "search",
	Short: "Searches the results of ht redis dump",
	Long:  `Searches the results of ht redis dump`,
	RunE: func(cmd *cobra.Command, args []string) error {
		keycount := 0

		// Load JSON Infile
		dataToUpload, err := loadRedisData(UploadInfile)
		if err != nil {
			fmt.Printf("Unable to load file: %s\n", UploadJsonInfile)
			return err
		}
		// For each key, add to database
		for _, redisData := range dataToUpload {
			var key = fmt.Sprintf("%s:%s", redisData.Database, redisData.Key)

			keycount++
			// Need to base64 decode the value
			value := fmt.Sprintf("%v", redisData.Value)
			if key == SearchString || (Fuzzy && strings.Contains(key, SearchString)) {
				if VerboseOutput {
					fmt.Printf("key: %v\n", key)
				}

				if Decode {
					dumpValue, _ := b64.StdEncoding.DecodeString(value)
					fmt.Printf("%v\n", dumpValue)
				} else {
					fmt.Printf("%v\n", value)
				}
			}

		}

		return nil

	},
}
