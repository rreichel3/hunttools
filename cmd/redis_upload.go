package cmd

import (
	b64 "encoding/base64"
	"fmt"

	"github.com/go-redis/redis/v8"
	"github.com/rreichel3/hunttools/cmd/utils"
	"github.com/spf13/cobra"
)

func init() {
	redisUploadCmd.Flags().StringVarP(&UploadJsonInfile, "infile", "i", "", "Infile generated by ht redis dump -j")
	redisUploadCmd.MarkFlagRequired("infile")

	redisRootCmd.AddCommand(redisUploadCmd)
}

var UploadJsonInfile string
var redisUploadCmd = &cobra.Command{
	Use:   "restore",
	Short: "Upload the results of ht redis dump",
	Long:  `Upload the results of ht redis dump. Uses RESTORE`,
	RunE: func(cmd *cobra.Command, args []string) error {
		rdb := redis.NewClient(&redis.Options{
			Addr:     fmt.Sprintf("%s:%d", RedisHostname, RedisPort),
			Password: RedisPassword, // no password set
			DB:       RedisDB,       // use default DB
		})

		// Load JSON Infile
		dataToUpload, err := utils.LoadJsonMap(UploadJsonInfile)
		if err != nil {
			fmt.Printf("Unable to load file: %s\n", UploadJsonInfile)
			return err
		}
		// For each key, add to database
		for key, valueInterface := range dataToUpload {
			// Need to base64 decode the value
			value := fmt.Sprintf("%v", valueInterface)
			dumpValue, _ := b64.StdEncoding.DecodeString(value)
			rdb.Restore(ctx, key, 0, string(dumpValue))
		}

		return nil

	},
}
